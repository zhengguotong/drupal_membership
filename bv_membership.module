<?php
/**
 * Implements hook_menu().
 */
function bv_membership_menu(){
    $items = array();

    $items['user/%user/apply'] = array(
        'title' => t('会员申请'),
        'description' => t('会员申请'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('bv_membership_member_apply_page'),
        'file' =>  'bv_membership.apply.inc',
        'access callback' => 'user_is_logged_in',
        'type' => MENU_LOCAL_TASK,
    );

    $items['user/apply/return'] = array(
        'title' => t('会员申请结果'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('bv_membership_apply_return'),
        'access callback' => 'user_is_logged_in',
        'type' => MENU_NORMAL_ITEM,
    );

    $items['user/apply/notify'] = array(
        'page callback' => 'bv_membership_process_notify',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    return $items;
}


/**
 * hid some fileds on user profile page
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function bv_membership_form_alter(&$form, &$form_state, $form_id) {
    global $user;

    if ($form_id === 'user_profile_form') {

        if(!in_array('administrator', $user->roles) && !in_array('管理员', $user->roles)){
            hide($form['field_parent_user']);
            hide($form ['field_parent_user_phone']);
            hide($form ['picture']);
            hide($form ['timezone']);
            hide($form ['locale']);
            hide($form['field_prev']);
            hide($form['field_user_city']);
            hide($form['field_user_dist']);
            hide($form['field_user_town']);
            hide($form['field_vip_apply_date']);
            hide($form['field_vip_expired_date']);
        }else{
            _bv_member_set_city_select($form);
        }
    }

    if( $form_id === 'user_register_form'){

        if(!in_array('administrator', $user->roles) && !in_array('管理员', $user->roles)) {
            hide($form['field_prev']);
            hide($form['field_user_city']);
            hide($form['field_user_dist']);
            hide($form['field_user_town']);
        }else{
            _bv_member_set_city_select($form);
        }
    }
}

function _bv_member_set_city_select(&$form){
    global $base_url;

    $form['#attached']['js'] = array(
        drupal_get_path('module', 'bv_membership') . '/js/cityselect.js',
    );

    $form['#attached']['css'] = array(
        drupal_get_path('module', 'bv_membership') . '/css/bv_memeber.css',
    );

    $form['baseurlh'] = array('#type' => 'hidden',
        '#value' =>$base_url . '/' . drupal_get_path('module', 'bv_membership') . '/js/city.min.js',
        '#attributes' => array('class' => array('baseurlh')));

    $form['city']= array( '#markup' => '<div class="city-select"><label class="control-label">所属地址</label><select class="form-select prov"></select>'
        . '<select class="form-select city" disabled="disabled"></select><select class="form-select dist" disabled="disabled"></select><select class="form-select town" disabled="disabled"></select></div><div class="clear"></div>',
        '#weight' => 2);
}


function bv_membership_alipay_payment($current_user){
    // URL for directing incoming payment transaction requests.
    $url = 'https://mapi.alipay.com/gateway.do?';

    $payment_method = commerce_payment_method_instance_load('alipay_global|commerce_payment_alipay_global');

    if (empty($payment_method['settings']['partner'])) {
        return array();
    }

    // Set feedback URLs.
    $settings = array(
        // Return to the payment redirect page for processing successful payments.
        'return' => url('user/apply/return', array('absolute' => TRUE)),
        'notify' => url('user/apply/notify', array('absolute' => TRUE)),
    );
    $settings = $payment_method['settings'] + $settings;

    $amount = $payment_method['settings']['debug'] ? 0.01 : variable_get('commerce_vip_points_member_fee','40.00');

    // Declare the data to be provided through Alipay's API to process payment.
    $data = array(
        'service' => $settings['service'],
        'payment_type' => '1',
        'partner' => $settings['partner'],
        'seller_email' => $settings['seller_email'],
        'return_url' => $settings['return'],
        'notify_url' => $settings['notify'],
        '_input_charset' => 'UTF-8',
        'show_url' => $settings['return'],
        'out_trade_no' =>  $current_user->uid,
        'subject' => t('伊恩国际会员费-用户 !user_name', array('!user_name' => $current_user->name)),
        'body' => t('!user_name 会员费', array('!user_name' => $current_user->name)),
        'total_fee' =>round($amount,2),
        'currency' => 'AUD',
        'sign_type' => 'MD5',
    );
    // Encrypted transaction signature.
    $data['sign'] = commerce_alipay_global_sign($settings['key'], $data);

    return $url . drupal_http_build_query($data);
}

/**
 * Menu callback function to process Alipay's feedback notifications.
 */
function bv_membership_process_notify() {
    if (empty($_POST)) {
        return FALSE;
    }
    if (bv_membership_notify_validate($_POST)){
        bv_membership_notify_submit($_POST);
    }
}

/**
 * Validation of Alipay's notifications.
 */
function bv_membership_notify_validate($notify) {
    if (empty($notify)) {
        return FALSE;
    }
    // Log an entry of the notification received for a transaction.
    watchdog('bv_membership', 'Alipay Golbal Notification with the following data:<pre>@notify</pre>', array('@notify' => print_r($notify, TRUE)));
    $payment_method = commerce_payment_method_instance_load('alipay_global|commerce_payment_alipay_global');

    $notify = drupal_get_query_parameters($notify);

    // Encrypted transaction signature.
    $sign = commerce_alipay_global_sign($payment_method['settings']['key'], $notify);
    // Verification is done by querying the following Alipay API URL.
    $verify_url = extension_loaded('openssl') ? 'https://mapi.alipay.com/gateway.do?service=notify_verify&' : 'http://notify.alipay.com/trade/notify_query.do?';
    $result = drupal_http_request($verify_url . 'partner=' . $payment_method['settings']['partner'] . '&notify_id=' . $notify["notify_id"]);
    if ($result->data == 'true' && $sign == $notify['sign']) {
        return TRUE;
    }
    return FALSE;
}


/**
 * Submit and process a notification feedback from Alipay for a transaction.
 *
 */
function bv_membership_notify_submit($notify){
    $user = user_load($notify['out_trade_no']);
    if(!empty($user) && $notify['trade_status'] =='TRADE_FINISHED'){

        $user->roles[5] = '5';//auto assign 会员role
        $user->field_vip_apply_date['und']['0']['value'] =  date('Y-m-d H:i:s', strtotime('now'));
        if(empty( $user->field_vip_expired_date)){
            $user->field_vip_expired_date['und']['0']['value'] =  date('Y-m-d H:i:s', strtotime('+1 year'));
        }else{
            $today = date("Y-m-d H:i:s");
            $current_expired_date = $user->field_vip_expired_date['und']['0']['value'];
            if($current_expired_date <= $today){
                $user->field_vip_expired_date['und']['0']['value'] =  date('Y-m-d H:i:s', strtotime('+1 year'));
            }
            else{
                $user->field_vip_expired_date['und']['0']['value'] =  date('Y-m-d H:i:s', strtotime('+1 year',strtotime($current_expired_date)));
            }
        }
        user_save($user);

        db_insert('bv_memebership_transaction')
        ->fields(array(
            'uid' => $notify['out_trade_no'],
            'date' => date('Y-m-d H:i:s', strtotime('now')),
            'number' =>$notify['trade_no'],
            'amount' =>$notify['total_fee'],
            'currency_code' =>$notify['currency'],
            'payment_method' => 'Alipay Global',
            'status' => $notify['trade_status'],
            'data' => serialize($notify),
        ))
        ->execute();
    }
}


function bv_membership_apply_return($form, &$form_state){
    $form = array();

    if (bv_membership_return_validate($_GET)){
        $form['message'] = array(
            '#markup' => '<div class="message">恭喜你！你的会员申请已经成功，点击<a href="/user">会员专区</a>查看你的会员优惠!</div>'
        );
    } else{
        drupal_goto('/user');
    }
    return $form;
}


function bv_membership_return_validate($notify) {
    if (empty($notify) || empty($notify['out_trade_no']) || empty($notify['trade_status'])) {
        return FALSE;
    }
    // Log an entry of the notification received for a transaction.
    watchdog('bv_membership', 'Customer returned from Alipay with the following data:<pre>@notify</pre>', array('@notify' => print_r($notify, TRUE)));
    global $user;

    if($notify['out_trade_no'] == $user->uid && $notify['trade_status'] =='TRADE_FINISHED' ){
        return true;
    }

    return FALSE;
}
